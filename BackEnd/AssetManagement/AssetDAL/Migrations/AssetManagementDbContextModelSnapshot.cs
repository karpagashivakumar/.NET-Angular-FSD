// <auto-generated />
using System;
using AssetDAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetDAL.Migrations
{
    [DbContext(typeof(AssetManagementDbContext))]
    partial class AssetManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetDAL.Models.Asset", b =>
                {
                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AssetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssetId"));

                    b.Property<string>("AssetCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AssetCategory");

                    b.Property<string>("AssetModel")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AssetModel");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AssetName");

                    b.Property<string>("AssetNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AssetNo");

                    b.Property<string>("AssetStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("Available")
                        .HasColumnName("AssetStatus");

                    b.Property<decimal?>("AssetValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AssetValue");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ImageUrl");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ManufacturingDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetNo")
                        .IsUnique();

                    b.ToTable("Assets", t =>
                        {
                            t.HasCheckConstraint("CK_Asset_ManufacturingDate", "ManufacturingDate <= GETDATE()");

                            t.HasCheckConstraint("CK_Asset_Status", "AssetStatus IN ('Available', 'Allocated', 'UnderMaintenance', 'Disposed', 'Lost')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.AssetAllocation", b =>
                {
                    b.Property<long>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AllocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AllocationId"));

                    b.Property<long?>("AllocatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("AllocatedBy");

                    b.Property<DateTime>("AllocatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("AllocatedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("AllocationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("Active")
                        .HasColumnName("AllocationStatus");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssetId");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Remarks");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnDate");

                    b.HasKey("AllocationId");

                    b.HasIndex("AllocatedBy");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AssetAllocations", t =>
                        {
                            t.HasCheckConstraint("CK_AssetAllocation_ReturnDate", "ReturnDate IS NULL OR ReturnDate >= AllocatedDate");

                            t.HasCheckConstraint("CK_AssetAllocation_Status", "AllocationStatus IN ('Active', 'Returned', 'Transferred')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.AssetAudit", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AuditId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssetId");

                    b.Property<string>("AuditNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("AuditNotes");

                    b.Property<DateTime>("AuditRequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("AuditRequestDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("AuditResponseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AuditResponseDate");

                    b.Property<string>("AuditStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("AuditStatus");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<long?>("RequestedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestedBy");

                    b.HasKey("AuditId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestedBy");

                    b.ToTable("AssetAudits", t =>
                        {
                            t.HasCheckConstraint("CK_AssetAudit_ResponseDate", "AuditResponseDate IS NULL OR AuditResponseDate >= AuditRequestDate");

                            t.HasCheckConstraint("CK_AssetAudit_Status", "AuditStatus IN ('Pending', 'InProgress', 'Completed', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.AssetRequest", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RequestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestId"));

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApprovedDate");

                    b.Property<string>("AssetCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AssetCategory");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RejectionReason");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("RequestDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RequestDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("RequestDescription");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("RequestStatus");

                    b.HasKey("RequestId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AssetRequests", t =>
                        {
                            t.HasCheckConstraint("CK_AssetRequest_ApprovedDate", "ApprovedDate IS NULL OR ApprovedDate >= RequestDate");

                            t.HasCheckConstraint("CK_AssetRequest_Status", "RequestStatus IN ('Pending', 'Approved', 'Rejected', 'Allocated')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.ServiceRequest", b =>
                {
                    b.Property<long>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceRequestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceRequestId"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssetId");

                    b.Property<string>("AssetNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AssetNo");

                    b.Property<long?>("AssignedTo")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignedTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Description");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IssueType");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("RequestDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ResolutionDate");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ResolutionNotes");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("Open")
                        .HasColumnName("ServiceStatus");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServiceRequests", t =>
                        {
                            t.HasCheckConstraint("CK_ServiceRequest_IssueType", "IssueType IN ('Repair', 'Maintenance', 'Replacement', 'Upgrade', 'Other')");

                            t.HasCheckConstraint("CK_ServiceRequest_ResolutionDate", "ResolutionDate IS NULL OR ResolutionDate >= RequestDate");

                            t.HasCheckConstraint("CK_ServiceRequest_Status", "ServiceStatus IN ('Open', 'InProgress', 'Resolved', 'Closed', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ContactNumber");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastLoginDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Gender", "Gender IN ('Male', 'Female', 'Other')");

                            t.HasCheckConstraint("CK_User_Role", "Role IN ('Admin', 'Manager', 'Employee')");
                        });
                });

            modelBuilder.Entity("AssetDAL.Models.AssetAllocation", b =>
                {
                    b.HasOne("AssetDAL.Models.User", "AllocatedByUser")
                        .WithMany()
                        .HasForeignKey("AllocatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AssetDAL.Models.Asset", "Asset")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetDAL.Models.User", "Employee")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AllocatedByUser");

                    b.Navigation("Asset");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AssetDAL.Models.AssetAudit", b =>
                {
                    b.HasOne("AssetDAL.Models.Asset", "Asset")
                        .WithMany("AssetAudits")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetDAL.Models.User", "Employee")
                        .WithMany("AssetAudits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetDAL.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("Employee");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("AssetDAL.Models.AssetRequest", b =>
                {
                    b.HasOne("AssetDAL.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AssetDAL.Models.User", "Employee")
                        .WithMany("AssetRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AssetDAL.Models.ServiceRequest", b =>
                {
                    b.HasOne("AssetDAL.Models.Asset", "Asset")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetDAL.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AssetDAL.Models.User", "Employee")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AssetDAL.Models.Asset", b =>
                {
                    b.Navigation("AssetAllocations");

                    b.Navigation("AssetAudits");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("AssetDAL.Models.User", b =>
                {
                    b.Navigation("AssetAllocations");

                    b.Navigation("AssetAudits");

                    b.Navigation("AssetRequests");

                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
